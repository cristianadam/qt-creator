// Copyright (C) 2024 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
//! [converting-ui-projects-to-applications]

    \1 projects are useful for creating user interfaces. To
    use them for application development in Qt Creator you have to add:

    \list
        \li Project configuration file (CMakeLists.txt or .pro)
        \li C++ code (.cpp)
        \li Resource files
        \li Code needed for deploying applications to \l{glossary-device}
            {devices}
    \endlist

    For more information about integrating QML and C++, see
    \l{Overview - QML and C++ Integration}.

    \note Since \QDS 2.3.0, \QDS project wizard templates generate projects that
    can be built with CMake. You can open the \e CMakeLists.txt project file in
    Qt Creator to continue developing the project. Also, you can use Qt Creator
    to create a Qt Quick Application project that you can open in \QDS.

    \target wizard-template-note
    \note Since \QDS 3.9.0, \QDS project wizard templates generate projects that
    automatically checkout and build the Qt Quick Studio Components from
    \l{https://code.qt.io/cgit/qt-labs/qtquickdesigner-components.git/} {Qt Code Review},
    using CMake. To turn off this feature, use the option \e BUILD_QDS_COMPONENTS
    in the CMake configuration.

    \if defined(qtcreator)
        For more information about using \QDS to create projects, see
        \l{Qt Design Studio Manual}.
    \endif

    If you want to use qmake as the build system, you can use a Qt Creator
    wizard template to create a Qt Quick application that is built using the
    qmake build system and then copy the source files from the Qt UI Quick
    project to the application project.

    You can use the \c RESOURCES option in the project configuration file to
    automatically add all the QML files and related assets to a
    \l{The Qt Resource System}{Qt resource collection file (.qrc)}. However,
    large files should be included as external binary resources instead of
    compiling them into the binary.

    The wizard automatically adds the \c QML_IMPORT_PATH option to the project
    file for specifying the required \l{QML Import Path}{QML import path}. The
    path is only needed if more than one subdirectory has QML files.

    Then you can use the \l QQuickView class in the main C++ source file to
    show the main QML file when the application starts.

    If you only install Qt Creator and Qt, remember to also select the
    Qt Quick Timeline module for installation.

    \section1 Handling Large Data Files

    Graphical assets used in the UI, such as images, effects, or 3D scenes
    are a typical cause for performance problems in UIs. Even building the
    application requires huge amounts of memory if you try to include large
    asset files, such as 100-MB 3D models or 64-MB textures, into the \c .qrc
    file for compiling them into the binary.

    First try to optimize your assets, as described in \l{Optimizing Designs}
    and \l {Creating Optimized 3D Scenes}.

    If you really need large assets, they should either be loaded directly from
    the file system or use the Qt resource system in the dynamic way. For more
    information, see \l{The Qt Resource System} in the Qt documentation.

    \section1 Adding Qt Quick Designer Components to Qt Installations

    Since \QDS 3.9, the Qt Quick Studio Components module is installed by default
    as part of the application. You can also install the module manually.

    For example:
    \list 1
        \li Clone the module repository.
            \badcode
            git clone https://code.qt.io/qt-labs/qtquickdesigner-components.git
            \endcode

        \li Install the Qt Quick Designer Components module.
        Enter the following commands:
        \badcode
        mkdir build
        cd build
        cmake -GNinja -DCMAKE_INSTALL_PREFIX=<path_to_qt_install_directory> <path_to_qtquickdesigner-components>
        cmake --build .
        cmake --install .
        \endcode
        \note Here, \e <path_to_qt_install_directory> and \e <path_to_qtquickdesigner-components>
        needs to be replaced with the real location on your local drive. For example,
        \e <path_to_qt_install_directory> can be something like \e /Qt/6.3.0/msvc2019_64
        and \e <path_to_qtquickdesigner-components> like this \e ../qtquickdesigner-components/
    \endlist

    \if defined(qtcreator)
    \sa {Create Qt Quick UI Prototypes}
    \endif


//! [converting-ui-projects-to-applications]
*/
