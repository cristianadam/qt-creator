/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Design Studio documentation.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
**
****************************************************************************/

/*!
    \page studio-designer-developer-workflow.html
    \previouspage studio-implementing-applications.html
    \nextpage creator-coding.html

    \title Designer-Developer Workflow

    \QDS enables designers and developers to work together on common
    projects to develop applications. Designers use the \l{Design Views}{views}
    in the \uicontrol Design mode to modify \l{UI Files}{UI files} (\e .ui.qml),
    whereas developers use Qt Creator to work on the Qt Quick (\e .qml) and
    other files that are needed to implement the application logic and to
    prepare the application for production.

    Use the \l{Using Git}{Git} version control system to ensure that changes
    are not lost when files are passed back and forth between designers and
    developers.

    \QDS \l{Creating Projects}{projects} come with boilerplate code for a
    working Qt 6 application that you can build and run in Qt Creator using
    CMake. Therefore, you can open, build, and run the projects with Qt Creator.

    \QDS continues to use the \e .qmlproject file format, while \QC uses a
    \e CMakeLists.txt file as the project file. This enables you to share
    your project as a fully working C++ application with developers.

    If you add or remove QML files in \QDS, you have to regenerate the
    \e CMakeLists.txt project configuration file by selecting \uicontrol Build
    > \uicontrol Run > \uicontrol {Generate CMakeLists.txt Files}.

    If you use Git, you can clone an example project
    \l{https://git.qt.io/public-demos/qtdesign-studio/-/tree/master/playground/AuroraCluster0}
    {here}.

    The following image shows the example project structure and contents in the
    \l Projects and \l {File System} views in \QDS and Qt Creator:

    \image studio-project-structure.png "\QDS project in \QDS and Qt Creator views"
    
    \section1 Converting project structure for CMake
    
    If you have an older QML project use these steps to convert it's file structure to the
    form that can be compiled into an executable.

    \list 1
    \li Create folder \a content in the project's folder. This folder contains the application's main module.
        \list
        \li Move all qml files of the project's main module into \a content folder. If your project has multiple
        modules, the other modules should be placed under \a imports or \a asset_imports.
        \li If your project's main module has resource folders such as \a fonts or \a images move them into \a content.
        \endlist
    \li Create folder \a src in the project's folder. This folder contains c++ code for compiling the project.
    \li If your project doesn't already have an \a imports folder for other QML modules, create it now even if
    you do not have other modules. The CMake file generator expects it.
    \li Edit project's .qmlproject file.
        \list
        \li Add \a "." in importPaths.
        \li Change mainFile to \a "content/App.qml" . \a App.qml will be created in the next step.
        \endlist
    \li Create \a App.qml .
        \list
        \li Copy this content as \a App.qml :
        
            \qml
            import QtQuick
            import QtQuick.Window
            import <YourImportModuleHere>

            Window {
                width: Constants.width
                height: Constants.height

                visible: true
                title: "YourWindowTitleHere"

                <YourMainQmlClassHere> {
                }
            }
            \endqml
        
        \li Modify imported module, window dimensions, window title and main QML class appropriately.
        
            This template assumes your project has a module called <YourImportModuleHere> in \a imports folder
            and contains a singleton class called \a Constants . This isn't mandatory.
        \endlist
    \li Generate CMake files and c++ source files that are used to compile the application into
    an executable file by selecting \b Build > Generate CMakeLists.txt files .
    \endlist
*/
