// Copyright (C) 2025 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page studio-designer-developer-workflow.html
    \previouspage studio-implementing-applications.html
    \nextpage studio-debugging.html

    \title Designer-developer workflow

    \note In this section, you are using advanced menu items. These are not
    visible by default. To toggle the visibility of advanced menu items, see
    \l{Customizing the Menu Bar}.

    \QDS enables designers and developers to work together on common
    projects to develop applications. Designers use the \l{Design views}{views}
    in the \uicontrol Design mode to modify \l{UI files} (\c .ui.qml),
    whereas developers use Qt Creator to work on the Qt Quick (\c .qml) and
    other files that are needed to implement the application logic and to
    prepare the application for production.

    \QDS \l{Creating projects}{projects} come with boilerplate code for a
    working Qt 6 application that you can build and run in Qt Creator using
    CMake. Therefore, you can open, build, and run the projects with Qt Creator.

    \QDS continues to use the \c .qmlproject file format, while Qt Creator uses a
    \c CMakeLists.txt file as the project file. This enables you to share
    your project as a fully working C++ application with developers.

    You can also enable \QDS projects for Python development. When enabled,
    \QDS creates a Python folder within the project folder with the file
    \c {main.py}. Use this file to start the development in Python for the UI
    made with \QDS.

    The following table summarizes the key workflows and tools available for integrating \QDS
    projects with C++, Python, and Qt Creator development environments.

    \table
        \header
            \li Topic
            \li Description
        \row
            \li \l {Exporting a \QDS project for C++ development}
            \li Create a project in \QDS, and develop it with C++.
        \row
            \li \l {CMake Generator}
            \li
                \list
                    \li Convert the contents of the \c {.qmlproject} file to CMake.
                    \li Convert a project created with an older \QDS version.
                    \li Import Qt Quick Designer Components.
                \endlist
        \row
            \li \l {Exporting a \QDS project for Python development}
            \li Create a project in \QDS, and develop it with Python.
        \row
            \li \l {Converting \QDS projects to applications}
            \li Create a project in \QDS, and develop it in Qt Creator.
    \endtable

*/
