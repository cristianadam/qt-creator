// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \page qtquick-positioning.html
    \previouspage qtquick-properties.html
    \nextpage qtquick-annotations.html

    \title Scalable Layouts

    The position of a \l{glossary-component}{component} in a UI is either
    absolute or relative to other components. The visual components exist at a
    particular location in the screen coordinate system at any instant in time.
    The x and y coordinates of a visual component are relative to those of its
    visual parent, with the top-left corner having the coordinate (0, 0).

    If you are designing a static UI,
    \l{Important Concepts In Qt Quick - Positioning#manual-positioning}
    {manual positioning} provides the most efficient form of positioning
    components. For a dynamic UI, employ the following positioning
    methods:

    \list
        \li \l{Setting Bindings}
        \li \l{Setting Anchors and Margins}
        \li \l{Aligning and Distributing Components}
        \li \l{Using Positioners}
        \li \l{Using Layouts}
        \li \l{Organizing Components}
    \endlist

    \section2 Setting Bindings

    \l{Positioning with Bindings}{Property binding} is a declarative way of
    selecting the value of a property. Binding allows a property value to be
    expressed as a JavaScript expression that defines the value relative to
    other property values or data accessible in the application. The property
    value is automatically kept up to date if the other properties or data
    values change.

    Property bindings are created implicitly whenever a property is assigned a
    JavaScript expression. To set JavaScript expressions as values of properties
    in the \l Properties view:
    \list 1
        \li Select the \inlineimage icons/action-icon.png
        (\uicontrol Actions) menu next to a property, and then select
        \uicontrol {Set Binding}.

        \image qmldesigner-set-expression.png "Actions menu"

        \li In \uicontrol {Binding Editor}, select a component and a property from
        lists of available components and their properties.

        \image qmldesigner-binding-editor.png "Binding Editor"
    \endlist

    When a binding is set, the \uicontrol Actions menu icon changes to
    \inlineimage icons/action-icon-binding.png.
    To remove bindings, select \uicontrol Actions > \uicontrol Reset.

    To set bindings on the \uicontrol Bindings tab in the
    \l Connections view, see \l {Adding Bindings Between Properties}.

    To learn information on the JavaScript environment, see
    \l{Integrating QML and JavaScript}.

    \note To have better performance, set anchors and margins for binding
    components. For example, instead of setting \c {parent.width} for a
    component, anchor the component to its sibling components on the
    left and the right.

    \section2 Setting Anchors and Margins

    In an \l{Important Concepts In Qt Quick - Positioning#anchors}
    {anchor-based} layout, each component has a set of
    invisible \e anchor lines: top, bottom, left, right, fill, horizontal
    center, vertical center, and baseline.

    To set anchors and margins for components:

    \list 1
        \li Go to \l Properties > \uicontrol Layout.
        \li Set the anchors of a component.
        \li Select anchor buttons.
        \note Combine the top/bottom, left/right, and horizontal/vertical anchors
        to anchor components in the corners of the parent component; or center them
        horizontally or vertically within the parent component.
    \endlist

    \image qmldesigner-anchor-buttons.png "Anchor buttons"

    To apply fill anchors to a component, select
    \inlineimage icons/anchor-fill.png (\uicontrol {Fill to Parent}).

    To reset the anchors to their saved state, select
    \inlineimage icons/qtcreator-anchors-reset-icon.png
    (\uicontrol {Reset Anchors})

    Specify the baseline anchor in the \l{Code} view.

    For performance reasons, only anchor a component to its siblings
    or direct parent. By default, a component is anchored to its parent when
    you use the anchor buttons. To anchor to a sibling of the component, select
    the sibling component as \uicontrol Target.

    Arbitrary anchoring is not supported. For example, don't select:
    \c {anchor.left: parent.right}. Select:
    \c {anchor.left: parent.left}. When you use the anchor buttons, anchors to
    the parent component are always set to the same side. However, anchors
    to sibling components are set to the opposite side:
    \c {anchor.left: sibling.right}. This allows you to keep sibling components
    together.

    In the following image, the left edge of \e rectangle1 is anchored to the
    right edge of the sibling on its left side, \e rectangle, while its top
    edge is anchored to the top of its parent.

    \image qmldesigner-anchors.png "Anchoring sibling components"

    The anchors are set as follows in code:

    \qml
    Rectangle {
        id: rectangle1
        anchors.left: rectangle.right
        anchors.top: parent.top
        anchors.leftMargin: 5
        anchors.topMargin: 30
    }
    \endqml

    To define the empty space outside of a component, set the
    \uicontrol Margin. Margins function for anchors. They do not take any
    effect when using layouts or absolute positioning.

    \section2 Aligning and Distributing Components

    For a group of components, select them to align
    and distribute them evenly. As the positions of the components are fixed,
    you cannot apply these functions to anchored components. For scalability,
    anchor the aligned and distributed components when your design is
    ready.

    \image qmldesigner-alignment.png "Aligning sibling components"

    Select the buttons in the \uicontrol Alignment field to align the top/bottom
    or left/right edges of a group of components to the one farthest away
    from the center of the group. For example, when left-aligning, the
    components are aligned to the leftmost component. You can also align the
    horizontal/vertical centers of components, or both.

    In the \uicontrol {Align to} field, select whether to align the components
    in respect to the selection, the root component, or a \e {key component}
    that you select in the \uicontrol {Key object} field. The key component must
    be a part of the selection.

    Distribute either \e components or the \e spacing between them.
    If the components or spacing cannot be distributed to equal pixel values
    without ending up with half pixels, you receive a notification.
    Either allow \QDS to distribute components or spacing using the closest
    values possible or tweak your design so that the components and spacing
    is distributed perfectly.

    When distributing components, select the buttons in the
    \uicontrol {Distribute objects} field to determine whether the
    distance between components is calculated from their top/bottom
    or left/right edges or their horizontal/vertical center.

    When distributing spacing, select the buttons in the
    \uicontrol {Distribute spacing} field to determine whether
    it is distributed evenly within a target area or at
    specified distances, calculated from a starting point.
    Select the orientation in which the components are distributed
    evenly within the target area: horizontally along the x axis or vertically
    along the y axis.

    Alternatively, distribute spacing in pixels by selecting one of the
    starting point buttons: top/left or bottom/right edge of the target area or
    item, or its center. The edge to use depends on whether the items are
    distributed horizontally or vertically:

    \list
        \li Select \inlineimage icons/distribute-origin-top-left.png
            and \inlineimage icons/distribute-spacing-horizontal.png
            to use the left edge of the target area or item as the starting
            point.
        \li Select \inlineimage icons/distribute-origin-top-left.png
            and \inlineimage icons/distribute-spacing-vertical.png
            to use the top edge.
        \li Select \inlineimage icons/distribute-origin-bottom-right.png
            and \inlineimage icons/distribute-spacing-horizontal.png
            to use the right edge.
        \li Select \inlineimage icons/distribute-origin-bottom-right.png
            and \inlineimage icons/distribute-spacing-vertical.png
            to use the bottom edge.
    \endlist

    \note Some components might end up outside the target area.

    In the \uicontrol {Pixel spacing} field, set the space between
    components in pixels. Disable the distribution of spacing in
    pixels by clicking the \inlineimage icons/distribute-origin-none.png
    button.

    \section2 Using Positioners

    Positioner components are containers that manage the positions of their
    child components. For many use cases, the best positioner to use is a simple
    column, row, flow, or grid. Use the components available in
    \uicontrol Components > \uicontrol {Default Components} >
    \uicontrol Positioner to position the children of a component in these
    formations in the most efficient manner possible.

    To position several components in a
    \uicontrol Column \inlineimage column-positioner-icon-16px.png,
    \uicontrol Row \inlineimage row-positioner-icon-16px.png,
    \uicontrol Grid \inlineimage grid-positioner-icon-16px.png,
    or \uicontrol Flow \inlineimage flow-positioner-icon-16px.png :

    \list 1
        \li Select the components in the \l {2D} view.
        \li Select \uicontrol Position in the context menu.
    \endlist

    \section3 Column Positioner

    A \uicontrol Column positions its child components along a single column.
    It is used as a convenient way to vertically position a series of
    components without using anchors.

    \image qtquick-positioner-column-properties.png "Column properties"

    For all positioners, set the spacing between the child
    components in the \uicontrol Spacing field.

    In addition, set the vertical and horizontal padding between
    content and the left, right, top, and bottom edges of components
    in the \l Padding section.

    \section3 Row and Flow Positioners

    A \uicontrol Row positions its child components along a single row. It is
    used as a convenient way to horizontally position a series of components
    without using anchors.

    The \uicontrol Flow component positions its child components like words on a
    page, wrapping them to create rows or columns of components.

    \image qtquick-positioner-flow-properties.png "Flow properties"

    For flow and row positioners, also set the direction of a flow to
    either left-to-right or top-to-bottom in the \uicontrol Flow field.
    Components are positioned next to to each other according to the value you
    set in the \uicontrol {Layout direction} field until the width or height of
    the \uicontrol Flow component is exceeded, then wrapped to the next row or
    column.

    Set the layout direction to either \uicontrol LeftToRight or
    \uicontrol RightToLeft in the \uicontrol {Layout direction} field. If
    the width of the row is explicitly set, the left anchor remains to the
    left of the row and the right anchor remains to the right of it.

    \section3 Grid Positioner

    A \uicontrol Grid creates a grid of cells that is large enough to hold all
    of its child components, and places these components in the cells from left
    to right and top to bottom. Each component is positioned at the top-left
    corner of its cell with position (0, 0).

    \QDS generates the grid based on the positions of the child components in
    the \l {2D} view. You can modify the number of rows and columns in the
    \uicontrol Rows and \uicontrol Columns fields.

    \image qtquick-positioner-grid-properties.png "Grid properties"

    In addition to the flow and layout direction, you can set the horizontal
    and vertical alignment of grid components. By default, grid components are
    vertically aligned to the top. Horizontal alignment follows the value of the
    \uicontrol {Layout direction} field. For example, when layout direction is
    set to \uicontrol LeftToRight, the components are aligned on the left.

    To mirror the layout, set the layout direction to \uicontrol RightToLeft.
    To also mirror the horizontal alignment of components, select
    \uicontrol AlignRight in the \uicontrol {Alignment H} field.

    \section2 Using Layouts

    Use the components available in \uicontrol Components
    > \uicontrol {Qt Quick Layouts} to arrange components in UIs.

    Unlike positioners, layouts manage both the positions and sizes of their
    child components, and are therefore well suited for dynamic and resizable
    UIs. However, do not select fixed positions and
    sizes for the child components in the \l{2D Geometry}{Geometry - 2D} section
    in \l Properties, unless their implicit sizes are not satisfactory.

    Use anchors or the width and height properties of the layout itself
    to select its size in respect to its non-layout parent component. However,
    do not anchor the child components within layouts.

    To arrange several components in a column, row, grid, or
    \uicontrol {Stack Layout}, select the components in the \l {2D} view,
    and then select \uicontrol Layout in the context menu.

    Follow the process to put components in the \uicontrol {Grid Layout}.
    \list 1
        \li Drag four \uicontrol Rectangle components to the \l {2D} view.
            \image qtquick-layout-components.webp "Rectangle components in 2D view"
        \li Select all the components and right-click on one of them.
        \li From the context menu, select \uicontrol Layout > \uicontrol {Grid Layout}.
            \image qtquick-layout-context-menu.webp "Grid Layout in the context-menu"
        \li After you assign them to the \uicontrol {Grid Layout}, the components come
            together and take their places in rows and columns.
            \image qtquick-layout-in-grid.webp "Components in grid rows and columns"

    \endlist

    To make the components adept the width and height within the grid, follow these steps:
    \list 1
        \li Select a \uicontrol Rectangle component in the \l {2D} view
            and go to \uicontrol Layout in the \l {Properties} view.
        \li In the \uicontrol {Fill layout}, select both the \uicontrol Width and
            \uicontrol Height checkboxes.
            \image qtquick-layout-grid-layout-properties.webp "Layout properties for the component"
            \note Manipulate the \uicontrol {Row span} and the \uicontrol {Column span}
                  to allow the components to take more row and column spaces within the
                  \uicontrol {Grid Layout}.
        \li Repeat the previous step for all the \uicontrol Rectangle components.
        \li Select the \uicontrol {Grid Layout} in the \uicontrol Navigator view.
        \li Go to the \uicontrol {Geometry-2D} in the \uicontrol Properties view. In
            \uicontrol Size, increase the \uicontrol Width and \uicontrol Height.
        \li All the \uicontrol Rectangle components follow the change accordingly.
            \image qtquick-layout-in-grid-enlarged.webp "Components follow the change in grid size"
    \endlist

    \section3 Layout Properties

    A \uicontrol {Grid Layout} component provides a way of dynamically
    arranging components in a grid. If the grid layout is resized, all
    its child components are rearranged. If you want a layout with just
    one row or one column, use the \uicontrol {Row Layout} or
    \uicontrol {Column Layout} component.

    The child components of row and column layout components are automatically
    positioned either horizontally from left to right as rows or vertically from
    top to bottom as columns. The number of the child components determines the
    width of the row or the height of the column. Set the spacing
    between the child components in the \uicontrol Spacing field.

    The child components of grid layout components are arranged according to the
    \uicontrol Flow property. When the direction of a flow is set to
    \uicontrol LeftToRight, child components are positioned next to to each
    other until the number of columns specified in the
    \uicontrol {Columns & Rows} field is reached. Then,
    the auto-positioning wraps back to the beginning of the next row.

    \image qtquick-layout-grid-properties.webp "Grid Layout properties"

    If you set the direction of the flow to \uicontrol TopToBottom, child
    components are auto-positioned vertically using the number of rows set
    in the \uicontrol {Columns & Rows} field to determine the maximum number
    of rows.

    You can set the layout direction to either \uicontrol LeftToRight or
    \uicontrol RightToLeft in the \uicontrol {Layout direction} field.
    When you select \uicontrol RightToLeft, the alignment of the components
    will be mirrored.

    Set the spacing between rows and columns in the
    \uicontrol Spacing field.

    \section3 Stack Layout

    \image qtquick-designer-stacked-view.png

    To add components to a \uicontrol {Stack Layout}, select the
    \inlineimage icons/plus.png
    button next to the component name in the \l {2D} view.
    To move between components, select the \inlineimage icons/prev.png
    (\uicontrol Previous) and \inlineimage icons/next.png
    (\uicontrol Next) buttons.

    To add a tab bar to a stack layout, right-click on the
    \uicontrol {Stack Layout} in \l Navigator to access the context menu, and
    select \uicontrol {Stacked Container} > \uicontrol {Add Tab Bar}.

    To raise or lower the stacking order of a component, select
    \uicontrol {Stacked Container} > \uicontrol {Increase Index} or
    \uicontrol {Decrease Index}.

    \section2 Organizing Components

    To organize components in \QDS, use these controls:

    \list
        \li To draw frames around groups and controls, use the \uicontrol Frame
            \inlineimage icons/frame-icon16.png and \uicontrol {Group Box}
            \inlineimage icons/groupbox-icon16.png.

        \li To apply common style on components, use the \uicontrol Pane
            \inlineimage icons/pane-icon16.png.

        \li To get the compoents in a page supporting a header and footer,
            use \uicontrol Page \inlineimage icons/page-icon16.png.

        \li To keep \uicontrol {Qt Quick Controls} in a group,
           use \uicontrol Group \inlineimage icons/group-16px.png.
    \endlist

    \note
        \br
        To access \uicontrol Frame, \uicontrol {Group Box}, \uicontrol Pane, and
        \uicontrol Page controls, go to \uicontrol Components >
        \uicontrol {Qt Quick Controls}.
        \br
        To access \uicontrol Group control,
        go to \uicontrol Components > \uicontrol {Qt Quick Studio Components}.
*/
