// Copyright (C) 2024 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

//! [creating studio components]

    \section1 Creating custom controls

    You can use project wizard templates to create stylable UI controls based
    on the components in the Qt Quick Controls module:

    \table
    \row
        \li \l Button
        \li \l {Check Box}
        \li \l {Slider and Dial}{Dial}
    \row
        \li \inlineimage studio-custom-button.gif
        \li \inlineimage studio-custom-check-box.gif
        \li \inlineimage studio-custom-dial.gif
    \row
        \li \l {Slider and Dial}{Slider}
        \li \l {Spin Box}
        \li \l Switch
    \row
        \li \inlineimage studio-custom-slider.gif
        \li \inlineimage studio-custom-spinbox.gif
        \li \inlineimage studio-custom-switch.gif
    \endtable

    You can edit the properties of the controls in all the preset
    \l{Working with states}{states} to apply your own style to them.

    \note For buttons and check boxes, you can disable the misbehaving hover
    effects by selecting \l Properties > \uicontrol Control, and then disabling
    the \uicontrol Hover check box.

    \image studio-dial.png "A stylable Dial component in the 2D view"

    To create stylable UI controls:

    \list 1
        \li Select \uicontrol File > \uicontrol {New File} >
            \uicontrol {Files and Classes} > \uicontrol {Qt Quick Controls}.
        \li Select the control to create, and then select \uicontrol Choose.

            \note Components are listed in \l Components >
            \uicontrol {My Components} only if the filename begins with a
            capital letter.
        \li Edit component properties in the \l Properties view.

            The available properties depend on the component type. You can
            \l{Specifying custom properties}{add properties for components} on
            the \uicontrol Properties tab in the {Connections} view.
    \endlist

    For an example of using the \uicontrol Button template to create a button
    and styling it, see \l{Creating a Push Button} in the \l{Login UI: Components}
    tutorial.

    In addition, you can create starting points for different types of screens:

    \list
        \li \l [QtQuickControls2] {Pane}
        \li \l {Stack Layout}
        \li \l [QtQuickControls2] {SwipeView}{Swipe View}
    \endlist

//! [creating studio components]
*/
