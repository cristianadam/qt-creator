// Copyright (C) 2021 The Qt Company Ltd.
// SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GFDL-1.3-no-invariants-only

/*!
    \previouspage qmldesigner-connections.html
    \page quick-signals.html
    \nextpage quick-property-bindings.html

    \title Connecting Components to Signals

    A signal and handler mechanism enables components to respond to application
    events, which are represented by \e signals. When a signal is emitted, the
    corresponding \e {signal handler} is invoked to respond to the event by
    using scripts or other operations placed in the handler.

    To receive a notification when a particular signal is emitted for a
    particular component, the component definition should declare a signal handler
    named \e {on<Signal>} where \e {<Signal>} is the name of the signal, with
    the first letter capitalized. The signal handler should contain the
    JavaScript code to be executed when the signal handler is invoked.

    Components have predefined signals that are emitted when users interact with
    the application. For example, the \l {Mouse Area} component has a \c clicked
    signal that is emitted whenever the mouse is clicked within the area. Since
    the signal name is \c clicked, the signal handler for receiving this signal
    is named \c onClicked.

    A signal is automatically emitted when the value of a property changes.
    This type of signal is a \e{property change signal} and signal handlers
    for these signals are written in the form \c on<Property>Changed, where
    \e <Property> is the name of the property, with the first letter
    capitalized.

    For example, the Mouse Area component has a \c pressed property. To receive
    a notification whenever this property changes, you would use a signal handler
    called \c onPressedChanged.

    For more information about signals and signal handlers, see
    \l{Signal and Handler Event System}.

    \section1 Using the \uicontrol {Connection Editor}

    You can connect components to signals that are available to them in
    \uicontrol Connections. Then define \uicontrol Action for them. You can
    put \b {logical conditions} on this \uicontrol Actions to control them
    according to your needs.

    \image qmldesigner-connections-advanced.webp

    Initiate a new connection for a component:

    \list 1
        \li Select the component you want to connect in \uicontrol Navigation view or in
            the \uicontrol 2D view.
        \li Go to the \uicontrol Connections tab in the \l Connections view.
        \li Select the \inlineimage icons/plus.png
            (\uicontrol Add) button to add a connection.
    \endlist

    \image qmldesigner-connections-editor.webp

    Connect component \uicontrol Signal to \uicontrol Action:

    \list 1
        \li Select the interaction \uicontrol Signal for the \uicontrol Target component with
            which you want to connect an \uicontrol Action.
        \li Select an \uicontrol Action that you want to implement when the selected
            \uicontrol Signal for the \uicontrol Target component is initiated.
        \li You will get different properties or sub-sections associated with the selected
            \uicontrol Action. Select \uicontrol {Item/Method/State/Property/Value} from related
            sub-sections. This way you can formulate changes in the design by manipulating
            components.
        \li Select \uicontrol {Add Condition} to include a logic to the selected \uicontrol Action.
            To do this, you can first select the component you want to put logic on, and then
            select the conditional statements \e {(i.e. AND, OR, EQUAL, NOT EQUAL, GREATER, LESS,
            GREATER OR EQUAL, LESS OR EQUAL)} and then select another component to compare
            between them.
        \li If needed, you can include an \uicontrol {Else Statement} by selecting the
            \uicontrol {Else Statement} control and adding components and conditional
            statements in a similar way to the previous step.
        \li If you need to use complex conditional statements, select the \uicontrol {Manual Edit}
            control. A pop up text editor will enable you to write the \e JavaScript statements
            you desire. Afterwards, close the window to have it applied.
    \endlist

    \note Select a connection to re-open the \uicontrol {Connection Editor} for any
        previously created \uicontrol Connection.
    \note Select the \inlineimage icons/minus.png
          (\uicontrol Remove) to delete a connection.


    \section1 \uicontrol Actions and \uicontrol Conditions

    You use the \uicontrol {Connection Editor} to create the JavaScript
    expressions for \e actions with \e conditions. An \e action connects
    an component to a signal, whereas an \e conditions fetches property values
    from other components and compares them. Based on that later a change can be
    made in the components with JavaScript expression.

    For more information about the logical operators that you can use to
    construct conditional expressions, see \l {Summary of Logical Operators}.

    To create JavaScript expressions for actions:

    There are two ways to do this.

    You can follow the steps mentioned in the Connect component \uicontrol Signal
    to \uicontrol Action instructions before.

    \image qmldesigner-connections-ConditionalAction-Autometic.webp

    For a detailed list of usable \uicontrol Actions and their usable properties
    check the following table.

    \table
        \header
            \li Action
            \li 1st Property
            \li 2nd Property
        \row
            \li \uicontrol {Call Function}
            \li \uicontrol {Item}: [Sets the component that is affected by the action of the
                \b Target component's \b Signal.]
            \li \uicontrol {Method}: [Sets the item component's method that is affected by the
                \b Target component's \b Signal.]
        \row
            \li \uicontrol {Assign}
            \li \uicontrol {From}: [Sets the component and its property from which the value
                is copied when the \b Target component initiates the \b Signal.]
            \li \uicontrol {To}: [Sets the component and its property to which the copied value
                is assigned when the \b Target component initiates the \b Signal.]
        \row
            \li \uicontrol {Change State}
            \li \uicontrol {State Group}: [Sets a \b {State Group} that is accessed when the
                \b Target component initiates the \b Signal.]
            \li \uicontrol {State}: [Sets a \b State within the assigned \b {State Group}
                that is accessed when the \b Target component initiates the \b Signal.]
        \row
            \li \uicontrol {Set Property}
            \li \uicontrol {Item}: [Sets the component that is affected by the action
                of the \b Target component's \b Signal.]
            \li \uicontrol {Property}: [Sets the property of the component that is
                affected by the action of the \b Target component's \b Signal.]
        \row
            \li \uicontrol {Print Message}
            \li \uicontrol {Message}: [Sets a text that is printed when the \b Signal
                of the \b Target component initiates.]
            \li \b N/A
    \endtable

    \note If you are creating a conditional expression selecting options from dropdown menus in
            the \uicontrol {Connection Editor} you will only be able to create a single
            level {if-else} expression. For nested level \e {if-elseif-else} expressions
            you have to use the \uicontrol {Manual Code Edit}.

    Alternatively, you can open the \uicontrol {Manual Code Edit} window from the
    \uicontrol {Connection Editor} and write \e JavaScript expression with components
    and logical expressions directly.

    \image qmldesigner-connections-ConditionalAction-Manual.webp

*/
